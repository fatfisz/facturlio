// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolveUrl errors while resolving should throw when a computed property is passed (import version) 1`] = `
"
Expected a non-computed identifier
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { ['thi' + 'rd']: three });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a computed property is passed 1`] = `
"
Expected a non-computed identifier
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { ['thi' + 'rd']: three });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a method is passed (import version) 1`] = `
"
Expected a property that is not a method
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { third() {} });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a method is passed 1`] = `
"
Expected a property that is not a method
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { third() {} });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a number property is passed (import version) 1`] = `
"
Expected an identifier as a property name, not a number
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { 3: three });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a number property is passed 1`] = `
"
Expected an identifier as a property name, not a number
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { 3: three });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a param is duplicated (import version) 1`] = `
"
Named parameter \\"second\\" overrides the value from the preceeding arguments (in \\"params/three/\${first}-\${second}/\${third}/\\")
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { second: three });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a param is duplicated 1`] = `
"
Named parameter \\"second\\" overrides the value from the preceeding arguments (in \\"params/three/\${first}-\${second}/\${third}/\\")
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { second: three });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a string property is passed (import version) 1`] = `
"
Expected an identifier as a property name, not a string
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { 'third': three });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when a string property is passed 1`] = `
"
Expected an identifier as a property name, not a string
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { 'third': three });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when an argument is passed after an object argument (import version) 1`] = `
"
No more parameters should appear after an object parameter
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { third: three }, 'foobar');
    |                                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when an argument is passed after an object argument 1`] = `
"
No more parameters should appear after an object parameter
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { third: three }, 'foobar');
    |                                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when an object argument is passed after an object argument (import version) 1`] = `
"
No more parameters should appear after an object parameter
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { third: three }, {});
    |                                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when an object argument is passed after an object argument 1`] = `
"
No more parameters should appear after an object parameter
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { third: three }, {});
    |                                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when an unknown param is passed (import version) 1`] = `
"
Unknown parameter \\"foobar\\", expected one of: \\"first\\" (in \\"params/one/\${first}/\\")
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('one-param', { foobar: 42 });
    |                           ^
"
`;

exports[`resolveUrl errors while resolving should throw when an unknown param is passed (more params) (import version) 1`] = `
"
Unknown parameter \\"foobar\\", expected one of: \\"first\\", \\"second\\" or \\"third\\" (in \\"params/three/\${first}-\${second}/\${third}/\\")
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { foobar: 42 });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when an unknown param is passed (more params) 1`] = `
"
Unknown parameter \\"foobar\\", expected one of: \\"first\\", \\"second\\" or \\"third\\" (in \\"params/three/\${first}-\${second}/\${third}/\\")
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { foobar: 42 });
    |                                            ^
"
`;

exports[`resolveUrl errors while resolving should throw when an unknown param is passed 1`] = `
"
Unknown parameter \\"foobar\\", expected one of: \\"first\\" (in \\"params/one/\${first}/\\")
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('one-param', { foobar: 42 });
    |                           ^
"
`;

exports[`resolveUrl errors while resolving should throw when the URL name is ignored (import version) 1`] = `
"
A URL with name \\"ignored\\" is marked as ignored
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('ignored');
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the URL name is ignored 1`] = `
"
A URL with name \\"ignored\\" is marked as ignored
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('ignored');
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the URL name is unknown (import version) 1`] = `
"
A URL with name \\"dunno\\" and arity 0 was not found
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('dunno');
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the URL name is unknown 1`] = `
"
A URL with name \\"dunno\\" and arity 0 was not found
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('dunno');
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the number of params is greater than expected (import version) 1`] = `
"
A URL with name \\"no-params\\" and arity 1 was not found
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('no-params', 42);
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the number of params is greater than expected (more params) (import version) 1`] = `
"
A URL with name \\"three-params\\" and arity 4 was not found
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', 'three', 'oops');
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the number of params is greater than expected (more params) 1`] = `
"
A URL with name \\"three-params\\" and arity 4 was not found
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', 'three', 'oops');
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the number of params is greater than expected (named params) (import version) 1`] = `
"
A URL with name \\"three-params\\" and arity 4 was not found
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 'one', 'two', { third: 3, oops: 4 });
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the number of params is greater than expected (named params) 1`] = `
"
A URL with name \\"three-params\\" and arity 4 was not found
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 'one', 'two', { third: 3, oops: 4 });
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the number of params is greater than expected 1`] = `
"
A URL with name \\"no-params\\" and arity 1 was not found
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('no-params', 42);
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the number of params is less than expected (import version) 1`] = `
"
A URL with name \\"three-params\\" and arity 1 was not found
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl('three-params', 42);
    | ^
"
`;

exports[`resolveUrl errors while resolving should throw when the number of params is less than expected 1`] = `
"
A URL with name \\"three-params\\" and arity 1 was not found
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl('three-params', 42);
    | ^
"
`;

exports[`resolveUrl invalid usage should throw when not used as a call (import version) 1`] = `
"
\`resolve\` should be called like a function
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl;
    | ^
"
`;

exports[`resolveUrl invalid usage should throw when not used as a call (with property) (import version) 1`] = `
"
Unknown property of \`resolve\` (only \`resolve.withQuery\` is supported)
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl.something;
    |            ^
"
`;

exports[`resolveUrl invalid usage should throw when not used as a call (with property) 1`] = `
"
Unknown property of \`resolve\` (only \`resolve.withQuery\` is supported)
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl.something;
    |            ^
"
`;

exports[`resolveUrl invalid usage should throw when not used as a call 1`] = `
"
\`resolve\` should be called like a function
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl;
    | ^
"
`;

exports[`resolveUrl invalid usage should throw when the URL param is not a string (import version) 1`] = `
"
The URL name should be a string literal
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl(42);
    |            ^
"
`;

exports[`resolveUrl invalid usage should throw when the URL param is not a string 1`] = `
"
The URL name should be a string literal
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl(42);
    |            ^
"
`;

exports[`resolveUrl invalid usage should throw when the params are missing (import version) 1`] = `
"
Missing the argument with URL name
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl();
    | ^
"
`;

exports[`resolveUrl invalid usage should throw when the params are missing 1`] = `
"
Missing the argument with URL name
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl();
    | ^
"
`;

exports[`resolveUrl.withQuery invalid usage should throw when not used as a call (import version) 1`] = `
"
\`resolve.withQuery\` should be called like a function
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl.withQuery;
    | ^
"
`;

exports[`resolveUrl.withQuery invalid usage should throw when not used as a call 1`] = `
"
\`resolve.withQuery\` should be called like a function
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl.withQuery;
    | ^
"
`;

exports[`resolveUrl.withQuery invalid usage should throw when the URL param is not a string (import version) 1`] = `
"
The URL name should be a string literal
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl.withQuery(42);
    |                      ^
"
`;

exports[`resolveUrl.withQuery invalid usage should throw when the URL param is not a string 1`] = `
"
The URL name should be a string literal
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl.withQuery(42);
    |                      ^
"
`;

exports[`resolveUrl.withQuery invalid usage should throw when the params are missing (import version) 1`] = `
"
Missing the argument with URL name
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl.withQuery();
    | ^
"
`;

exports[`resolveUrl.withQuery invalid usage should throw when the params are missing 1`] = `
"
Missing the argument with URL name
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl.withQuery();
    | ^
"
`;

exports[`resolveUrl.withQuery invalid usage should throw when the query argument is missing (import version) 1`] = `
"
The query argument is missing
  1 | import resolveUrl from './src/resolveUrl.macro';
> 2 | resolveUrl.withQuery('no-params');
    |                      ^
"
`;

exports[`resolveUrl.withQuery invalid usage should throw when the query argument is missing 1`] = `
"
The query argument is missing
  1 | const resolveUrl = require('./src/resolveUrl.macro');
> 2 | resolveUrl.withQuery('no-params');
    |                      ^
"
`;
