// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolve errors while resolving should throw when a computed property is passed 1`] = `
"test.js: ./resolve.macro: Expected a non-computed identifier

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 'one', 'two', { ['thi' + 'rd']: three });
    |                                         ^
"
`;

exports[`resolve errors while resolving should throw when a method is passed 1`] = `
"test.js: ./resolve.macro: Expected a property that is not a method

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 'one', 'two', { third() {} });
    |                                         ^
"
`;

exports[`resolve errors while resolving should throw when a number property is passed 1`] = `
"test.js: ./resolve.macro: Expected an identifier as a property name, not a number

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 'one', 'two', { 3: three });
    |                                         ^
"
`;

exports[`resolve errors while resolving should throw when a param is duplicated 1`] = `
"test.js: ./resolve.macro: Named parameter \\"third\\" overrides the value from the preceeding arguments (in \\"params/\${first}-\${second}/\${third}/\\")

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 'one', 'two', 'third', { third: three });
    |                                                  ^
"
`;

exports[`resolve errors while resolving should throw when a string property is passed 1`] = `
"test.js: ./resolve.macro: Expected an identifier as a property name, not a string

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 'one', 'two', { 'third': three });
    |                                         ^
"
`;

exports[`resolve errors while resolving should throw when an argument is passed after an object argument 1`] = `
"test.js: ./resolve.macro: No more parameters should appear after an object parameter

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 'one', 'two', { third: three }, 'foobar');
    |                                                         ^
"
`;

exports[`resolve errors while resolving should throw when an unknown param is passed (more params) 1`] = `
"test.js: ./resolve.macro: Unknown parameter \\"foobar\\", expected one of: \\"first\\", \\"second\\" or \\"third\\" (in \\"params/\${first}-\${second}/\${third}/\\")

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 'one', 'two', { third: three, foobar: 42 });
    |                                                       ^
"
`;

exports[`resolve errors while resolving should throw when an unknown param is passed 1`] = `
"test.js: ./resolve.macro: Unknown parameter \\"foobar\\", none were expected (in \\"params/zero\\")

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('no-params', { foobar: 42 });
    |                        ^
"
`;

exports[`resolve errors while resolving should throw when the URL name is unknown 1`] = `
"test.js: ./resolve.macro: A URL with name \\"dunno\\" was not found

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('dunno');
    |         ^
"
`;

exports[`resolve errors while resolving should throw when the number of params is greater than expected 1`] = `
"test.js: ./resolve.macro: URL \\"no-params\\" accepts at most 0 parameters but more were found (in \\"params/zero\\")

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('no-params', 42);
    |                      ^
"
`;

exports[`resolve errors while resolving should throw when the number of params is greater than expected 2`] = `
"test.js: ./resolve.macro: URL \\"three-params\\" accepts at most 3 parameters but more were found (in \\"params/\${first}-\${second}/\${third}/\\")

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 'one', 'two', 'three', 'oops');
    |                                                ^
"
`;

exports[`resolve errors while resolving should throw when the number of params is less than expected 1`] = `
"test.js: ./resolve.macro: Missing values for parameters: \\"second\\", \\"third\\" (in \\"params/\${first}-\${second}/\${third}/\\")

  1 | const resolve = require('./resolve.macro');
> 2 | resolve('three-params', 42);
    | ^
"
`;

exports[`resolve happy paths should resolve the URL with expressions as params 1`] = `"\`params/\${1 + 2}-\${'one' + 'two'}/\${(() => 'yo')()}/\`;"`;

exports[`resolve happy paths should resolve the URL with identifiers as params 1`] = `"\`params/\${one}-\${two}/\${three}/\`;"`;

exports[`resolve happy paths should resolve the URL with no params (empty named params object) 1`] = `"\`params/zero\`;"`;

exports[`resolve happy paths should resolve the URL with no params 1`] = `"\`params/zero\`;"`;

exports[`resolve happy paths should resolve the URL with numbers as params 1`] = `"\`params/\${1}-\${2}/\${3}/\`;"`;

exports[`resolve happy paths should resolve the URL with partially named params (1 out of 3) 1`] = `"\`params/\${'one'}-\${'two'}/\${'three'}/\`;"`;

exports[`resolve happy paths should resolve the URL with partially named params (2 out of 3) 1`] = `"\`params/\${'one'}-\${'two'}/\${'three'}/\`;"`;

exports[`resolve happy paths should resolve the URL with partially named params (3 out of 3) 1`] = `"\`params/\${'one'}-\${'two'}/\${'three'}/\`;"`;

exports[`resolve happy paths should resolve the URL with partially named params (expressions) 1`] = `"\`params/\${1 + 2}-\${'one' + 'two'}/\${(() => 'yo')()}/\`;"`;

exports[`resolve happy paths should resolve the URL with strings as params 1`] = `"\`params/\${'one'}-\${'two'}/\${'three'}/\`;"`;

exports[`resolve happy paths should resolve the URL with templates as params 1`] = `"\`params/\${\`\${1} + \${2}\`}-\${\`\${'one'} + \${'two'}\`}/\${\`\${(() => \`\${yo}\`)()}\`}/\`;"`;

exports[`resolve invalid usage should throw when not used as a call (with property) 1`] = `
"test.js: ./resolve.macro: \`resolve\` should be called like a function

  1 | const resolve = require('./resolve.macro');
> 2 | resolve.something;
    | ^
"
`;

exports[`resolve invalid usage should throw when not used as a call 1`] = `
"test.js: ./resolve.macro: \`resolve\` should be called like a function

  1 | const resolve = require('./resolve.macro');
> 2 | resolve;
    | ^
"
`;

exports[`resolve invalid usage should throw when the URL param is not a string 1`] = `
"test.js: ./resolve.macro: The URL name should be a string literal

  1 | const resolve = require('./resolve.macro');
> 2 | resolve(42);
    |         ^
"
`;

exports[`resolve invalid usage should throw when the params are missing 1`] = `
"test.js: ./resolve.macro: Missing the argument with URL name

  1 | const resolve = require('./resolve.macro');
> 2 | resolve();
    | ^
"
`;
